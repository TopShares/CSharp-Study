
【观察者模式】（Observer）

一、概述

1.概念：观察者模式实现了对象之间，一对多的依赖关系。让多个观察者对象，同时监听一个信息发布者（通知者）。
通知者可以同时对多个观察者发布消息，多个观察者接受消息，执行自己的动作。

2.使用场合：一个对象变化，需要通知其他对象作出相关反应。并且它不用关心多少个其他对象在关注它。

3.典型应用：redis rabbitmq  js的框架knockout.js MVVM模式，本周就是观察者模式

4.通俗理解：一个消息发布者（通知者），希望给它的关注者（观察者）推送消息。比如我们上课的消息，上位机设备报警信息，希望其他模块响应报警而做出动作。

（一呼百应）

二、应用举例

跟着演示，自己动手写一遍就好。

三、观察者模式的特点

1.通知者和观察者相互协作，其实就是一种解耦。让耦合的双方依赖抽象，而不是依赖具体。也就是说自己变化没有影响其他。

2.一个通知者，可以同时有多个观察者，一旦通知发布，所有观察者都能接收，并且做出统一反应。

思考问题：

实际应用中，观察者之间可能是没有任何关系的类，，但是他们都需要接收通知者发出的通知，并做出反应。这时候想，能不能把Update（）方法，定义成一个接口？

分析：如果我们定义成一个接口，那么所有的观察者都要实现这个接口。而实际情况是，观察者在做出反应的时候，不见得都是统一的动作，经常是不一样的。比如，学校，我们听到打铃生，教师需要准备上课，学生需要的是准备听课，教务需要的是监督教学。

再比如上位机所联通设备，发生报警信号，上位机一个模块可能记录报警数据，同时其他模块可能对设备参数或设备执行机构作出不同的动作。

一个通知发出，百种呼应方式。

解决方法：我们可以来了委托和事件！一个委托原型，可以有不同的实现方法。

四、基于委托事件实现观察者模式

1.定义通知者皆可和声明委托

2.定义两个观察者

3.定义具体通知者


五、总结

根据一个委托原型可以产生多个方法的实现，而我们委托对象关联的方法（事件关联）并不需要属于同一个类。
































