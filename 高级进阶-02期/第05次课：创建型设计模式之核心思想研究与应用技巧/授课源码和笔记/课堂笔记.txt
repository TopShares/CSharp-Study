
课程官网：xiketang.com

课程直播学习网址：xiketang.ke.qq.com
=========================================================================

主题：创建型设计模式研究

OOP：原则  +  设计模式  +  AOP ...

设计原则：解决了程序编写的指导思想。

设计模式：程序开发中针对特定问题的解决方案总结。（前辈的经验总结，可以随着自己经验的增多，

我们完全可以总结出属于自己专利的设计模式）

设计模式分类：

1. 创建型设计模式：研究《对象的创建》问题

【1.1】简单工厂：解决了单一对象的创建问题。

【1.2】抽象工厂：解决了多组对象的创建问题。

【1.3】单利模式：对象使用中始终保持唯一。

建造者模式、原型模式...

2. 结构型设计模式：研究《类与类之间的关系》问题

适配器模式、桥接模式、组合模式、装饰器设计模式、外观模式，代理模式....


3. 行为型设计模式：研究《对象和行为的分离》问题

关于类：类包括属性和方法。属性表示类的数据存储。方法表示类的各种操作。

模板方法、命令模式、中介者模式、观察者模式、....

=========================================================================

创建型     造 
结构性     合
行为型     分

=========================================================================

对象之间的关系：

【1】纵向：（树形）继承-->实现（父类--子类）  接口-->实现
【2】横向：（平行）由弱到强的关系：依赖-->关联-->聚合-->组合 （关联链是我们研究的重点）

        UML中对象关系必须要清楚，其实就是为你后面做设计准备的。


记忆方法：

【1】依赖：可以使用你。偶然。 用完就扔。
【2】关联：需要使用你。长期。 甩不掉。
【3】聚合：团队的成员。大家关系比较紧密。但是并不是非你不可！
【4】组合：我们是一家。关系非常紧密。谁也不能缺少。

======================================================================

1. 单利模式（SingletonDesignPattern）

基本概念：单利模式就是在使用中，始终只有一个对象的实例。基本方法就是提供一个静态的访问点（方法）保证

只有一个实例，而不会重复创建。

使用好处：在特定情况下，节省对象的创建资源，避免性能损失。

应用场合：高性能的非关系型数据库redis、memcache、mongoDB，底层都需要一个连接池，都会用到。

应用举例：




       
        





















