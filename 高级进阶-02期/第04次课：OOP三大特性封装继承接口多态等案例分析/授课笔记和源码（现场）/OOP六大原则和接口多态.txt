
课程官网：xiketang.com
课程直播学习网址：xiketang.ke.qq.com
=========================================================================

主题：面向对象的六大原则

OO：OOA、OOD、OOP

【1】如何把面向对象编程学好？

就是学习一系列的原则、方法、技巧、经验、模式。达到OOP目标：让程序高可扩展、高可维护、高性能。


六大原则：

单一职责（对象职责明确原则）SRP：一个对象所完成的任务是明确的。而不能设计万能类！

开闭原则（开放扩展，封闭修改）OCP：如果一个项目的需求变化，会导致很多程序的修改，则我们说你的程序设计破坏了开闭原则。实际情况应该是，需求变化，尽量通过扩展对象实现，而不是修改对象。

里氏替换原则（LSP）：父类能够被他的子类替代。是我们实现多态的基本的机制！

迪米特法则（Lod）：也叫最小（知道、知识）原则。用于对象解耦。

接口隔离原则（ISP）：是说我们设计接口的时候，尽量以小接口出现，不要设计一个复杂接口。

依赖倒置原则（DIP）：高层模块不应该依赖于低层模块。两种模块都应该依赖抽象。

--------------------------------------------------------------------------------------------------------------

一、单一职责（SRP）：

1.概念：一个类只负责一个功能领域中相关的职责实现。也就是不能设计万能类。

PS：工具类型的软件需要涉及的类（UI、实体类、业务类）数据库应用系统（UI、实体类、业务类、数据访问类、工具类...）

UI（边界类）：主要是用来收集用户操作数据，或者展示数据给用户。他不应该有具体的，或更多的业务参与。更不能有其他的任务。

三层架构设计：理论基础也是对象职责明确原则（单一职责）


2.好处：各个类各负其责！好处，当一个类的修改变化，不会影响到整个的程序。

二、里氏替换原则（LSP）

1.概念：子类必须能够替换掉它的父类类型，反之不行。
2.举例：人，可以被男人、女人替换。父类  变量= 子类对象    
3.好处：子类可以替换父类，不仅原有的父类功能不受影响，而且还能扩展自己的新的行为。
4.强调：里氏替换原则是实现开闭原则的重要方式之一。

5.指导：提醒大家，以后变成尽量针对“基类、父类”编程！换句话说，针对“接口”编程。

三、迪米特法则（LoD）+开闭原则

1.概念：也叫最小化原则。当两个类之间直接通信的时候，会导致“高度”依赖！（高耦合）

为了解决这个问题，我们应该尽量的避免这两个类直接“接触”（低耦合），可以通过一个第三者做转发。

2.关系：  A->B->C

3.举例：用户--->公司客服系统---->售后服务  如果你去找销售员，就是直接耦合！

总结：迪米特法则根本思想就是让类之间解耦，实现是松耦合。达到更多的复用，一个类的修改不影响其他类。

体现：封装思想，尽量降低成员的方权限，而不是全部public。一个类依赖的另一个类的实现越少越好！

应用：工厂设计模式（中介者模式、外观模式...）

四、开闭原则

封闭修改，开放扩展。当需求变化的时候，我们尽量扩展对象，而不是修改原有对象。

汽车经销店业务流程模拟。

我在公开课中，当我设计完Models文件夹中的这些类的时候，我就直接在Program里面写业务了！


-----------------------------------------------------原则的深入理解-----------------------------------


单一职责中对象的理解：类（普通类、接口）-->模块（BLL、DAL、Models）

里氏替换原则：不仅适用于父类、子类（父类要求：一般应该有抽象方法、虚方法，只有具备抽象方法，我们才能够在类中中重写，这样子类才能扩展一种或多种行为！）

还适用接口！

-----------------------------------------------------------以下是普通类的继承，不包括抽象方法和虚方法

class A{  A1公共方法（）{}  B1公共方法（）{}}

class C：A
{
    D1（）{}
}

class D：A
{
    F1（）{}
}

以上写法主要作用是：代码复用，减少冗余！

A a1=new C（）；

A a2=new D（）；

以上用法：可以？可以！但是，好吗？有必要吗？不好！根本没有必要！实际应用没有价值！

所有的类都继承自object类

object o=new C（）；
-----------------------------------------------------------------------------------------------------------------

学员问题：如果后期有新需求是不是还是得回到父类和接口区添加新的抽象方法？

首先：如果直接到父类或接口添加新的抽象方法或接口，那么违背开闭原则！

如果现实中真的有这种情况，那没啥好办法，你就得把所有的实现类或者子类都得修改！但是我们尽量避免！因为

如果一个项目经常遇到这种情况，说明你设计的不好！

另外的解决方案：使用扩展方法。还有，我们后面学习AOP面向切面编程，如果你在实现中，有些需求无法预料，

或者目前无法完全确定，这时候就应该考虑动态扩展。DI，Ioc容器。

假如：一个接口类有5个接口方法，然后有若干实现类，但是后续需要增加一个接口，但是这个接口并不是所有实现类

都需要的。这种情况绝对不能直接修改原有接口。因为你修改后，所有的实现类都要变化，引起“代码地震”。

解决方法：设计小接口，谁有需求谁使用！

PS：继承在实际开发中，尽量少用！用接口。如果我们侧重于代码的复用，则这部分用继承。如果侧重功能的扩展，则使用接口！

--------------------------------------------------依赖倒置原则---------------------------------------------

依赖倒置：（DIP）高层模块不应该依赖于低层模块，两个都应该依赖于抽象（接口/抽象类）；抽象不应该依赖于细节，细节应该依赖于抽象。

举例：电脑主板，各个模块，都是按照主板接口来实现的。谁是抽象部分？主板各种插槽。细节：内存条、硬盘、独立显卡，鼠标、键盘

抽象不应该依赖于细节理解：生产主板的时候，是不用考虑哪个厂家的“模块”。

细节应该依赖于抽象的理解：生产各个模块的时候，必须遵循主板的接口！intel  AMD 

体现：面向抽象编程就是说的DIP。

依赖细节？

--------------------------------------------------接口隔离原则---------------------------------------------

接口隔离原则：一个对象和另一个对象交互，所依赖的内容减少到最小。也就是说一个接口类的设计必须严格遵循“单一职责”。

不要设计万能接口，也不要设计过多接口，换句话说也不能让接口泛滥。

Q：拆分多少合适？依靠大家的经验！

举例证明：


----------------总结：

1.单一职责（SRP）：对象职责单一化

2.开闭原则：对象修改最小化

3.里氏替换原则：程序扩展具体方法

4.迪米特法则：实现高内聚低耦合

5.依赖倒置原则：“下面”依赖于“上面”。面向抽象编程的根本！

6.接口隔离原则：接口设计要适中。




















































































