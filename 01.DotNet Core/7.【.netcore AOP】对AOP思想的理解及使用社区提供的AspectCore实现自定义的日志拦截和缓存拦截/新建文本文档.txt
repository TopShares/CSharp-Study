一：AOP思想

1. 我们知道AOP是面向切面编程，很好的解决了系统级的功能和业务功能的耦合问题。。。
   
   怎么理解呢？

   业务功能是什么：从数据库捞查询一条数据（这个属于业务功能） select xxx from xxtable where .....

   系统级功能是什么：

   1. 这条数据要不要缓存起来？ 【缓存模块】就是系统功能，和业务功能关系不大，只是用来提升性能。

      redis，mongodb，newsql。。

   2. 当前用户是否有获取数据的权限 ？ 【验证模块】

      是不是爬虫（脚本）获取的。。。

   3. 收集用户的操作痕迹，后期进行大数据行为分析。 【日志模块】



二：使用AspNetCore 提供的AOP功能，实现一个简单的 【日志模块】+【缓存模块】

1. github地址：https://github.com/dotnetcore/AspectCore-Framework

   引用AspectCore.Extensions.DependencyInjection 


   基于IOC容器的。。


   日志模块：


using AspectCore.DynamicProxy;
using Microsoft.Extensions.DependencyInjection;
using System;
using System.Threading.Tasks;
using AspectCore.Extensions.DependencyInjection;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            //IOC容器
            ServiceCollection services = new ServiceCollection();

            //注册服务
            services.AddDynamicProxy();

            services.AddTransient<IMySql, MySql>();

            var provider = services.BuildAspectCoreServiceProvider();

            var mysql = provider.GetService<IMySql>();

            mysql.GetData(10);

            Console.Read();

        }
    }

    public class MyLogInterceptorAttribute : AbstractInterceptorAttribute
    {
        public override Task Invoke(AspectContext context, AspectDelegate next)
        {
            Console.WriteLine("开始记录日志。。。。。");

            var task = next(context);

            Console.WriteLine("结束记录日志。。。。。");

            return task;
        }
    }

    public interface IMySql
    {
        string GetData(int id);
    }

    public class MySql : IMySql
    {
        [MyLogInterceptor]
        public string GetData(int id)
        {
            var msg = $"已经获取到数据id={id}的数据";

            Console.WriteLine(msg);

            return msg;
        }
    }
}


缓存模块。。。











