本次主题：多线程原理研究

前面我们讲解了异步编程和简单的多线程的应用

（1）线程Thread在内存空间上，和时间的消耗研究
（2）线程Thread相关的实例方法
（3）线程Thread相关的静态方法

为什么要使用线程？在多核CPU时代，使用线程能够充分利用硬件资源，提升软件的运行效率。想用好多线程，必须对线程在计算机中对资源的消耗做一个评价或者参考。

线程和进程关系？一个程序运行，通常会在任务管理器中看到一个进程，这个程序占用多少资源，并不是由进程决定的，而是由这个进程所分配的线程决定。也就是操作系统是通过线程来管理程序资源的。

一、线程在内存空间上如何开销？

windows操作系统中，线程的数据结构包括主要的内容：

【1】Thread内核数据结构，主要有osid（线程的ID），Contex上下文（存放了CPU寄存器相关的变量）。

  基本原理，就是操作系统调用这个线程的时候，寄存器的状态会被加载到CPU中，线程的执行环境肯定会发生变化，当线程被调出的时候，寄存器最后的状态重新保存到Contex中，以便下次使用。多线程需要时间片来切换帮助实现。

时间片切换的理解：计算机基于时间片把当前线程中的资源放到CPU的Context中，然后线程休眠，开始调度另一个线程，一个时间片应该大约30ms左右。

【2】Thread环境块（Thread Environment Block ，TEB）

概念理解：包括tls（Thread Local Storage Data）Thread本地存储、exceptionList的信息等。

windbg来观察线程环境块有什么内容？

windbg好处，通过它可以观察CLR这一级别的信息，底层看的更清楚。

windbg要使用，我们首先要加载sos和clr模块（请大家自己找到sos和clr对应的dll文件）

C:\Windows\Microsoft.NET  有Framework和Framework64，分别对应32位和64位。
C:\Windows\Microsoft.NET\Framework64\v4.0.30319这个目录下面会看到SOS.dll和clr.dll文件。
------------------------------------------------------------------------------------------------------------

加载sos的方法：在windbg中输入：.loadby sos clr 加载后，就可以使用sos的命令。

PS：sos所有的命令都以感叹号“！”开头，通过！help 查看所有的命令

《常用命令1》：!threads

ThreadCount:      3     当前有三个线程
UnstartedThread:  0
BackgroundThread: 1
PendingThread:    0
DeadThread:       1       死掉一个线程，因为当前线程执行完了。

       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception
   0    1 415c 00000000010d0570    2a020 Preemptive  0000000002E77C38:0000000002E77FD0 00000000010c45a0 1     MTA 
   2    2 2948 00000000010fcdf0    2b220 Preemptive  0000000000000000:0000000000000000 00000000010c45a0 0     MTA (Finalizer) 
XXXX    3    0 0000000001124550    39820 Preemptive  0000000000000000:0000000000000000 00000000010c45a0 0     Ukn 


第一个线程是主线程，第二个是终结器线程，也就是GC用来回收资源的，以上请大家自己学会观察。

《常用命令2》：!teb 查看当前线程的环境块

TEB at 0000000000dad000
    ExceptionList:        0000000000000000   （重点了解）
    StackBase:            000000001bb30000
    StackLimit:           000000001bb2c000
    SubSystemTib:         0000000000000000
    FiberData:            0000000000001e00
    ArbitraryUserPointer: 0000000000000000
    Self:                 0000000000dad000
    EnvironmentPointer:   0000000000000000
    ClientId:             00000000000010fc . 0000000000001b18
    RpcHandle:            0000000000000000
    Tls Storage:          0000000000000000    （后面还要介绍）
    PEB Address:          0000000000d9a000
    LastErrorValue:       0
    LastStatusValue:      0
    Count Owned Locks:    0
    HardErrorMode:        0

以上内容都会占用资源。

【3】用户模式堆栈：用户程序的“局部变量”和“参数传递”所使用的堆栈。

      经常见的StackOverFlowException，内存溢出基本原因，就是《堆栈溢出》

      默认情况，Windows会分配1M的空间用于用户模式堆栈（也就是一个线程分配1M的堆栈空间，主要是参数，局部变量）

【4】内核模式堆栈：在CLR的线程操作，包括线程同步，通常都是调用底层win32函数，用户模式的参数需要传递到内核模式。
（简单说，就是我们的程序要访问操作系统时使用的堆栈）

 二、线程在时间上的开销

【1】我们运行一个程序，通常会加载很多托管的和非托管的dll，exe，资源，元数据...，我们通过windbg可以观察到。

  使用windbg加载一个进程的时候，会有很多ModLoad列表，这些就是加载的模块...

  应用程序域概念：Application Domain  用来隔离在同一个计算机上运行的不同程序。

  《常用命令3》!DumpDomain

System Domain: （由CLR创建的）

Shared Domain: 加载了一个叫做mscorlib.dll模块，这个是系统模块，很多程序需要（如果感兴趣，可以自己研究）

Domain 1：加载了当前exe文件，还有mscorlib.dll模块，也就是我们运行的这个程序最终在这个里面。

【2】时间片切换

  通过观察，当前我的计算机是4线程，如果超过4个线程，比如5个，必然会有一个thread休眠30ms，也就是时间片切换，来实现调度。

 以上是我们开启一个线程，所带来的开销，请大家权衡后，适当的开启我们需要的线程，不要任意开启，否则CPU也难以承受。

三、线程Thread相关的实例方法

我们主要研究Thread生命周期管理？需要首先了解几个方法：

Start，Suspend（暂停），Resume（恢复）、Interrupt（中断）、Abort（取消）

Join（不是生命周期管理的）

创建一个windows应用程序，测试一下：

【1】Start启动线程，从窗体上输出数据

【2】Suspend暂后，使用windbg观察thread状态

0:011> .loadby sos clr
0:011> !threads
ThreadCount:      3
UnstartedThread:  0
BackgroundThread: 1
PendingThread:    0
DeadThread:       0
Hosted Runtime:   no
                                                                                                        Lock  
       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception
   0    1 3d10 0000000000e1fd00    26020 Preemptive  0000000002CDCCB0:0000000002CDDFD0 0000000000e133d0 0     STA 
   5    2 1efc 0000000000e4ce20    2b220 Preemptive  0000000000000000:0000000000000000 0000000000e133d0 0     MTA (Finalizer) 
  10    3  5d8 000000001cd73660    ab024 Preemptive  0000000002C9A7B0:0000000002C9BFD0 0000000000e133d0 0     MTA 

0:011> !ThreadState ab024
    User Suspend Pending     （用户暂停模式）
    Legal to Join
    CLR Owns
    CoInitialized
    In Multi Threaded Apartment
    Fully initialized
    Sync Suspended             （同步暂停）

【3】Resume 继续：主要用来恢复Suspend的暂停功能。

【4】Interrupt 中断：非常类似于C#循环中的continue。

【5】Abort 终止：通过抛出异常的方式销毁一个线程。非常类似于C#循环中的break

通过windbg观察：

0:014> .loadby sos clr
0:014> !threads
ThreadCount:      3
UnstartedThread:  0
BackgroundThread: 1
PendingThread:    0
DeadThread:       1
Hosted Runtime:   no
                                                                                                        Lock  
       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception
   0    1 4f18 0000000001489f40    26020 Preemptive  00000000032BDA68:00000000032BDFD0 000000000147eb60 0     STA 
   5    2  2d8 00000000014b77c0    2b220 Preemptive  0000000000000000:0000000000000000 000000000147eb60 0     MTA (Finalizer) 
XXXX    3    0 000000001f455ff0   839820 Preemptive  0000000000000000:0000000000000000 000000000147eb60 0     Ukn 
0:014> !threadstate 839820 
    Legal to Join
    Dead        当前线程已经over
    CLR Owns
    In Multi Threaded Apartment
    Reported Dead
    Fully initialized
    Aborted     当前的状态

PS：Join：调用线程等待子线程执行完后才能执行（在此等待子线程执行完）



  





























