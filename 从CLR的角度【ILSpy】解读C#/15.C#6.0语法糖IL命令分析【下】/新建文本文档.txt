

一：字符串嵌入值  Razor

  1. 使用占位符，{0}，{1}。。。

  2. 字符串拼接,  "abcd"+v+"ddd";  

  3. 字符串嵌入值

二：我们站在IL的角度去看一下

  IL_002f:  box        [mscorlib]System.Int32
  IL_0034:  call       string [mscorlib]System.String::Format(string,
                                                              object,
                                                              object)
   我们可以清楚的看到，所谓的字符串嵌入值，就是占位符实现的。。。


二：nameof表达式   => 取谁的name。。。

    简单的看到，就是将一个“强类型” 转化成了 “字符串”。。

    我记得在携程的时候，我们有一个LogCenter，以前标记类都是用“字符串”。要么就是GetType

            //第一种方式
            LogCenter center = new LogCenter("Program");

	    //第一种的确定显而易见，因为是硬编码

            //第二种方式
            LogCenter center2 = new LogCenter(typeof(Program).Name);

            //第二种我们用到了反射，性能可想而知。。。
	    Ldtoken： 将元数据标记转换为其运行时表示形式，并将其推送到计算堆栈上。


            //C# 6.0 中支持的
            LogCenter center3 = new LogCenter(nameof(Program));

	    //性能到底怎么样？？？ 用IL偷窥一下
              我们清楚的看到，nameof的性能和你直接写字符串对CLR来说是一样的。。。。

  .entrypoint
  // Code size       45 (0x2d)
  .maxstack  1
  .locals init ([0] class ConsoleApplication1.LogCenter center,
           [1] class ConsoleApplication1.LogCenter center2,
           [2] class ConsoleApplication1.LogCenter center3)
  IL_0000:  nop
  IL_0001:  ldstr      "Program"
  IL_0006:  newobj     instance void ConsoleApplication1.LogCenter::.ctor(string)
  IL_000b:  stloc.0
  IL_000c:  ldtoken    ConsoleApplication1.Program
  IL_0011:  call       class [mscorlib]System.Type [mscorlib]System.Type::GetTypeFromHandle(valuetype [mscorlib]System.RuntimeTypeHandle)
  IL_0016:  callvirt   instance string [mscorlib]System.Reflection.MemberInfo::get_Name()
  IL_001b:  newobj     instance void ConsoleApplication1.LogCenter::.ctor(string)
  IL_0020:  stloc.1
  IL_0021:  ldstr      "Program"
  IL_0026:  newobj     instance void ConsoleApplication1.LogCenter::.ctor(string)
  IL_002b:  stloc.2
  IL_002c:  ret


三：带索引的对象初始化器Index initializers 　 

    1. 直接通过索引进行对象的初始化，原来真的可以实现

    2. 方便我们去开发，提高效率。

      static void Main(string[] args)
        {
            var dic = new Dictionary<int, string>()
            {
                [10] = "jack",
                [20] = "mary",
                [30] = "jackson"
            };

            //上下两种写法是一样
            dic[10] = "jack";
            dic[20] = "mary";
            dic[30] = "jackson";
        }
   
     3. Struct的无参数 在CLR via C# 特别强调的。。。