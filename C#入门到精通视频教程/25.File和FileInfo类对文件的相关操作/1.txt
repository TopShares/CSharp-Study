
一：File和Directory类

1. Directory

   用于操作文件夹的类。

   《1》 创建文件夹  【如何代码可以去创建文件夹，那么我就不需要手工去创建了】

   《2》 删除文件夹

   《3》 移动文件夹

   《4》判断文件夹是否存在


案例：test下面有两个文件夹

      test/1
    
      test/2


      第一步：在1下面创建一个叫做“mydirectory”的文件夹。

      第二步：判断1下面的文件夹是否存在，如果存在，将其移动到2这个文件夹下面。。

      第三步：删除2下面的文件夹

      
     static void Main(string[] args)
    {
        var path = @"H:\test\1\mydirectory";

        var newpath = @"H:\test\2\mydirectory";

        //第一步：在1下面创建一个叫做“mydirectory”的文件夹。
       var dirc=Directory.CreateDirectory(path);

        Console.WriteLine("文件创建成功，等待10s 移动文件夹");

        Thread.Sleep(10000);

        //第二步：判断1下面的文件夹是否存在，如果存在，将其移动到2这个文件夹下面。。

        var isExists = Directory.Exists(path);

        Console.WriteLine("文件夹是否存在:{0}", isExists);

        if (isExists)
        {
            Directory.Move(path, newpath);
        }

        Console.WriteLine("文件夹移动成功，等待10s 三处文件夹");

        Thread.Sleep(10000);

        //删除文件夹
        Directory.Delete(newpath);
    }


 2. DiretoryInfo
    
    它和Directory是一样的，只不过一个是静态的类，一个是实例的类。

      static void Main(string[] args)
    {
        var path = @"H:\test\1\mydirectory";

        var newpath = @"H:\test\2\mydirectory";

        //第一步：在1下面创建一个叫做“mydirectory”的文件夹。
        //var dirc = Directory.CreateDirectory(path);
        var directory = new DirectoryInfo(path);

        Console.WriteLine("文件创建成功，等待10s 移动文件夹");

        Thread.Sleep(10000);

        //第二步：判断1下面的文件夹是否存在，如果存在，将其移动到2这个文件夹下面。。

        //var isExists = Directory.Exists(path);
        var isExists = directory.Exists;

        Console.WriteLine("文件夹是否存在:{0}", isExists);

        if (isExists)
        {
            //Directory.Move(path, newpath);
            directory.MoveTo(newpath);
        }

        Console.WriteLine("文件夹移动成功，等待10s 三处文件夹");

        Thread.Sleep(10000);

        //删除文件夹
        Directory.Delete(newpath);

    }


二：File的操作

   《1》 创建文件  【如何代码可以去创建文件夹，那么我就不需要手工去创建了】

           FileStream fs = File.Create(path);

	   大家一定要注意，File.Create方法返回的是一个文件句柄，那么这个句柄得到之后，尽量尽早释放，否则。。。会有文件被占用
	   的情况。

   《2》 删除文件

   《3》 移动文件

   《4》判断文件是否存在

  static void Main(string[] args)
    {
        var path = @"H:\test\1\mytest.txt";

        var newpath = @"H:\test\2\mytest.txt";

        //第一步：创建文件  【拿到的一个文件句柄】
        FileStream fs = File.Create(path);

        fs.Close();

        Console.WriteLine("文件创建成功，等待10s 移动文件");

        Thread.Sleep(10000);

        //第二步：判断文件是否存在
        var isExists = File.Exists(path);

        //第三步：如果文件存在，我们就移动到 ”2“这个文件夹下面
        if (isExists)
        {
            File.Move(path, newpath);
        }

        Console.WriteLine("文件夹移动成功，等待10s 删除文件");

        Thread.Sleep(10000);

        //第四步：移动成功，我们开始删除
        File.Delete(newpath);

    }
 
三：FileInfo类

他的里面都是实例方法，而File里面都是静态方法。。。


static void Main(string[] args)
    {
        var path = @"H:\test\1\mytest.txt";

        var newpath = @"H:\test\2\mytest.txt";

        //第一步：创建文件  【拿到的一个文件句柄】
        //FileStream fs = File.Create(path);
        FileInfo info = new FileInfo(path);

        var fs = info.Create();

        fs.Close();

        Console.WriteLine("文件创建成功，等待10s 移动文件");

        Thread.Sleep(10000);

        //第二步：判断文件是否存在
        //var isExists = File.Exists(path);
        

        //第三步：如果文件存在，我们就移动到 ”2“这个文件夹下面
        if (info.Exists)
        {
            //File.Move(path, newpath);
            info.MoveTo(newpath);
        }

        Console.WriteLine("文件夹移动成功，等待10s 删除文件");

        Thread.Sleep(10000);

        //第四步：移动成功，我们开始删除
        File.Delete(newpath);

    }

2. 文件写入操作：

   1. WriteAllText  用于将字符串写入到文本文件。

   2. WriteAllLines 用于数组写入到文本文件。

3. 文件的读出操作：

   1. ReadAllLines 用于每行每行的读取，每行都会生成一个数组元素。。。

   2. ReadAllText  对上面的写入操作是一一对应的。