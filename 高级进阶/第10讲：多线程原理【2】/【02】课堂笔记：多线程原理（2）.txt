本次主题：多线程原理研究（2）

（1）Thread静态方法
（2）ThreadPool线程池

一、Thread中静态方法详解：

【1】. Thread.AllocateDataSlot（）            未命名的数据槽位

   AllocateNamedDataSlot  命名的数据槽位

   GetNamedDataSlot（）

   FreeNamedDataSlot（）  释放槽位

   给所有线程分配一个数据槽。 存放数据。。。

  数据槽=》概念，见百度百科的解释。
https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%A7%BD/9764067?fr=aladdin

https://msdn.microsoft.com/zh-cn/library/vs/alm/6sby1byh(v=vs.100)

  SetData（）给槽位赋值

  GetData（） 获取槽位数据

【2】以上方法有什么用？

我们知道一个变量可以被多个线程使用修改，也可以被当前线程私有。

变量  =>  Thread 的关系     两个变量： thread1, thread2

以下两种情况：

《1》 thread1，thread2  共享变量    称为public         注意有“锁”的概念（后面讲解）

《2》thread1, thread2    各自有一个 变量  internel    没有锁争用的概念

  static void Main(string[] args)
        {
            var slot = Thread.AllocateNamedDataSlot("username");

            //主线程 上 设置槽位， 也就是hello world 只能被主线程读取，其他线程无法读取
            Thread.SetData(slot, "hello world!!!");

            var t = new Thread(() =>
            {
                var obj = Thread.GetData(slot);//同样的道理，反之也不行

                Console.WriteLine("当前工作线程:{0}", obj);
            });

            t.Start();

            var obj2 = Thread.GetData(slot);

            Console.WriteLine("主线程:{0}", obj2);

            Console.Read();
        }


《性能改进方法：使用 ThreadStatic特性》

        [ThreadStatic]
        static string username = string.Empty;

        static void Main(string[] args)
        {
            username = "hello world!!!";//观察在主线程上赋值会如何（工作线程没有数据）

            var t = new Thread(() =>
            {
                Console.WriteLine("当前工作线程:{0}", username);
            });

            t.Start();

            Console.WriteLine("主线程:{0}", username);

            Console.Read();
        }

《其他实现形式：ThreadLocal》

  static void Main(string[] args)
        {
            ThreadLocal<string> local = new ThreadLocal<string>();

            local.Value = "我们正在研究多线程！";

            var t = new Thread(() =>
            {
                Console.WriteLine("当前工作线程:{0}", local.Value);
            });

            t.Start();

            Console.WriteLine("主线程:{0}", local.Value);

            Console.Read();
        }


以上是存放在哪里？
这些数据都是存放在线程环境块中..【是线程的空间开销】 !teb来查看,发现下面的内容

TLS： thread local storage=》线程本地存储。

-----------------------------------------------------------------------------------------------------------------------------------------

二、thread中一些其他的静态方法 

【在VS中用Thread测试下面的方法】

1. MemoryBarrier  【内存栅栏（屏障）】

2. VolatileRead/Write 【易变读写】

疑问：以上这些方法的用途是什么？

在实际项目中，我们一般都用Release版本，而不是Debug

因为Release中做了一些代码和缓存的优化, 比如说将一些数据从memory中读取到cpu高速缓存中。


==》比较release和debug后的程序在运行中的性能差异

冒泡排序 O(N)2   1w * 1w 
算法复杂度：是指算法在编写成可执行程序后，运行时所需要的资源，资源包括时间资源和内存资源。应用于数学和计算机导论。
包括：时间复杂度和空间复杂度。（可以自己百度）

【编写冒泡排序程序，并测试10次，比较Release和Debug】
 先生成Debug，然后再生成Realease   直接运行生成的exe文件或者直接在工栏中运行，观察如下结果：

Debug的结果
第1次:  576
第2次:  221
第3次:  222
第4次:  225
第5次:  223
第6次:  221
第7次:  221
第8次:  220
第9次:  223
第10次: 221

Release的结果
第1次:  271
第2次:  96
第3次:  94
第4次:  97
第5次:  95
第6次:  96
第7次:  97
第8次:  95
第9次:  96
第10次: 96

从结果中可以看到，大概有2-3倍的差距！

在任何时候，不见得release都是好的。。有可能会给你引入一些bug。观察下面的程序

        static void Main(string[] args)
        {
            bool stop = false;//主线程定义一个变量（如果是用Release，会将stop变量放到CPU的Cache中）

            Thread thread = new Thread(() =>
            {
                int a = 0;
                while (!stop)     //子线程访问主线程的变量
                {
                    a++;
                    // Console.WriteLine(a++);      如果输出了，则不会出现主程序无法输出的问题。         
                }
            });
            thread.Start();
            thread.IsBackground = false;

            Thread.Sleep(1000);

            stop = true;//主线程也在使用stop变量

            thread.Join();//等待子线程结束

            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }

上面这段代码在release环境下出现问题了：主线程不能执行结束。。。。


从代码中可以发现，有两个线程在共同一个stop变量。

就是thread这个线程会将stop加载到Cpu Cache中，而主线程中，又修改了stop的数据，所以thread是无法知道的，

这样while就会一直执行！而主线程又在Join子线程，所以，无法输出！ 【release大胆的优化】

注意，以上情况，不是绝对的，也就是说主线程和子线程公用变量的情况，是否会出现上面的情况，是不完全确定的。

通常的解决方法：

1. 不要让多个线程去操作 一个共享变量，否则容易出问题。

2. 如果一定要这么做，那就需要使用本节课所讲到的两个方法：
   
   MemoryBarrier（）
   VolatileRead/Write（）

   也就是：不要进行缓存，每次读取数据都是从memory中读取数据。

【解决方法1：使用 Thread.MemoryBarrier()】
MemoryBarrier => 在此方法之前的内存写入都要及时从cpu cache中更新到 memory。

                             在此方法之后的内存读取都要从memory中读取，而不是cpu cache。


        static void Main(string[] args)
        {         
            bool stop = false;  
                    
            Thread thread = new Thread(() =>
            {
                int a = 0;
                while (!stop)  
                {
                    //在此方法之前的内存写入都要及时从cpu cache中更新到 memory。
                    //在此方法之后的内存读取都要从memory中读取，而不是cpu cache。
                    Thread.MemoryBarrier();
                    a++;                        
                }
            });
            thread.Start();
            thread.IsBackground = false;

            Thread.Sleep(1000);
            stop = true;
            thread.Join();
            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }

【解决方法2：使用 Thread.VolatileRead()】
 static void Main(string[] args)
        {
            int stop = 0;

            Thread thread = new Thread(() =>
            {
                int a = 0;
                while (stop == 0)
                {
                    Thread.VolatileRead(ref stop);//写入的最新值，就是memory中的最新值
                    a++;
                }
            });
            thread.Start();
            thread.IsBackground = false;

            Thread.Sleep(1000);
            stop = 1;
            thread.Join();
            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }

-----------------------------------------------------------------------------------------------------------------------------------------

三、ThreadPool 线程池

   thread           一个异步任务就需要开启一个Thread

   ThreadPool   系统创建线程，并缓存，需要的时候就拿来，用完返回去。


1. ThreadPool的使用方式

        static void Main(string[] args)
        {
               ThreadPool.QueueUserWorkItem((arg) =>
                {
                    Func<string> myFunc = arg as Func<string>;//【2】把传递的参数，转换成Func委托变量

                    Console.WriteLine("工作线程ID：{0}, 喜科堂网址={1}",
                        Thread.CurrentThread.ManagedThreadId, myFunc());//【3】通过MyFunc()方法调用
                }, new Func<string>(() => "xiketang.ke.qq.com"));//【1】将state参数用Func委托传递

            Console.WriteLine("主线程ID：{0}", Thread.CurrentThread.ManagedThreadId);

            Console.Read();
        }


2. Thread 和 ThreadPool 区别测试

现在有10个任务要完成：
【1】如果用Thread来做，需要开启10个Thread
   static void Main(string[] args)
        {
            //开启10个线程
            for (int i = 0; i < 10; i++)
            {
                Thread thread = new Thread(() =>
                {
                    for (int a = 0; a < 5; a++)
                    {
                        Console.WriteLine("----------------------" + a);
                        Console.WriteLine("工作任务：{0}\t线程ID={1}", i, Thread.CurrentThread.ManagedThreadId);
                    }
                });

                thread.Name = "线程名称：" + i;
                thread.IsBackground = true;
                thread.Start();
            }

            Console.Read();
        }

==》windbg的角度来看一下刚才的线程使用情况：
.loadby sos clr
输入命令：!threads

ThreadCount:      12      总数
UnstartedThread:  0
BackgroundThread: 1
PendingThread:    0
DeadThread:       10      死掉10个
Hosted Runtime:   no


1.区别： DeadThread: 10     虽然都挂掉了，但是没有被GC回收。。。。

用ILSpy观察线程如何销毁的：
从mscorlib中找到System.Threading，然后再找到Thread类==》Finalize()==>看源码如下：		
~Thread()
{
      this.InternalFinalize();
}

从析构函数中可以看到 this.InternalFinalize();  就是说销毁之后，先进入终结器。
CLR基础知识告诉我们进入终结器的好处：又被激活的可能，下次被GC回收。

因为到了终结器，我们从析构函数的源码中看不到线程的，这时候我们可以通过windbg
输入命令：!help
找到命令：!FinalizeQueue  查看终结器的队列

00007ffac8197d28       11         1056 System.Threading.Thread   有11个准备销毁（10个线程，另外一个可能是主线程）

继续使用命令观察里面的内容：
!DumpHeap /d -mt 00007ffac8197d28    【DumpHeap】显示有关垃圾回收堆的信息和有关对象的收集统计信息。（请参考官方文档的说明）

0:006> !DumpHeap /d -mt 00007ffac8197d28
         Address               MT     Size
0000000002ce2d90 00007ffac8197d28       96     
0000000002ce2eb0 00007ffac8197d28       96     
0000000002ce5280 00007ffac8197d28       96     
0000000002ce5440 00007ffac8197d28       96     
0000000002ce5600 00007ffac8197d28       96     
0000000002ce57c0 00007ffac8197d28       96     
0000000002ce5980 00007ffac8197d28       96     
0000000002ce5b40 00007ffac8197d28       96     
0000000002ce5d00 00007ffac8197d28       96     
0000000002ce5ec0 00007ffac8197d28       96     
0000000002cf60a8 00007ffac8197d28       96

随便继续点击Address带着下划线的地址观察：显示出列表后，继续观察name
0000000002ce51c0 m_Name
在把name前面的点开观察如下结果：
String:      线程名称：0
继续点击其他的...

虽然thread已经死掉了，但是该占的资源还是要的（1M空间）具体哪些资源？前面课程讲过，就是时间和空间的消耗。


【2】如果用ThreadPool来做，只需要将10个任务丢给线程池来完成即可

参考代码（略）

==>运行程序用windbg观察：
0:010> .loadby sos clr
0:010> !threads
ThreadCount:      6
UnstartedThread:  0
BackgroundThread: 5
PendingThread:    0
DeadThread:       0
Hosted Runtime:   no
                                                                                                        Lock  
       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception
   0    1 5c34 0000000000eb93f0    2a020 Preemptive  0000000002DBAEB8:0000000002DBBFD0 0000000000eae4c0 1     MTA 
   5    2 2c4c 0000000000ee6880    2b220 Preemptive  0000000000000000:0000000000000000 0000000000eae4c0 0     MTA (Finalizer) 
   6    3 2dc8 0000000000f126a0  1029220 Preemptive  0000000002DC23B8:0000000002DC3FD0 0000000000eae4c0 0     MTA (Threadpool Worker) 
   7    4 5e4c 0000000000f12e70  1029220 Preemptive  0000000002DB8C30:0000000002DB9FD0 0000000000eae4c0 0     MTA (Threadpool Worker) 
   8    5 5e08 0000000000f13b20  1029220 Preemptive  0000000002DC1900:0000000002DC1FD0 0000000000eae4c0 0     MTA (Threadpool Worker) 
   9    6 5034 0000000000f17890  1029220 Preemptive  0000000002DBF4A0:0000000002DBFFD0 0000000000eae4c0 0     MTA (Threadpool Worker) 在线程池的

0:010> !threadstate 1029220 
    Legal to Join
    Background
    CLR Owns
    In Multi Threaded Apartment
    Fully initialized
    Thread Pool Worker Thread     在线程池的

从windbg中可以看到，当前没有死线程，而是都是默认初始化的 Fully initialized。线程池默认了4个线程。

0:010> !threadpool  通过这个命令观察线程池

CPU utilization: 18%   CPU的利用率
Worker Thread: Total: 4（总计） Running: 0（运行的） Idle: 4（空闲的） MaxLimit: 327679（最大的）MinLimit: 4（最小的）
Work Request in Queue: 0  工作线程队列是0个，表示处理完毕
--------------------------------------
Number of Timers: 0
--------------------------------------
（IO线程）Completion Port Thread:Total: 0 Free: 0 MaxFree: 8 CurrentLimit: 0 MaxLimit: 1000 MinLimit: 4


结论：我们看到了当前的threadpool，

其中有“工作线程” 和 “IO线程”

工作线程： 给一般的异步任务执行的。其中不涉及到网络、文件这些IO操作。【开发者调用】比如我们做的for循环，用的就是工作线程。
IO线程：  一般用在文件、网络IO上。  【CLR调用】

为什么是4个线程？因为我的电脑有4个逻辑处理器，也就是4个可以并行处理。我们可以自己设置大小，但是不建议设置。

  ThreadPool.SetMinThreads(10,100)   

总结：

（1）threadPool 可以用4个线程 解决 thread 10个线程干的事情，

（2）4个线程节省了空间和时间开销：

时间开销： 通过各个托管和非托管的dll

空间开销：teb，osthread结构， 堆栈等。

最后，线程不是越多越好！多余逻辑处理器的线程，就会造成调度问题，调度必然带来更多的开销。

