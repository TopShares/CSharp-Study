授课内容：面向切面编程（AOP）的几种实现

一、如何理解AOP：

1.基本概念：AOP（Aspect Oriented Programming）是一种能够在现有面向对象封装的基础上，为了满足业务扩展的需求，而在程序运行时，动态添加某种程序的一种技术组合方式。

2.应用好处：

【1】项目开发中：让更专业的人，关注更专业的业务。比如，我们到银行取款或者查询，基本流程如下：

验证用户-->查询余额-->结束查询

验证用户-->执行取款-->结束取款

【2】项目开发后：如果我们想给某些业务动态增加一些功能，对原有的业务没有任何影响，可以使用AOP。

3.AOP和OOP、设计模式的关系

OOP：是我们设计各种类的基本方法和原则。使用OOP的各种设计原则和方法，程序总体框架设计是完全没有问题的。

设计模式：是为了更好的解决业务的可扩展问题，设计模式需要直接应用到现有的框架基础上。

需要你在设计的时候，就应该考虑到。和现有框架是融合到一起的。

AOP：不仅在项目框架设计中，而且完全可以在项目框架之外，动态的增加扩展功能。而对原有的封装是没有任何影响的。

特性也是AOP思想的一种体现。

也就是再我们项目设计中，如果我们没有考虑到某些业务，可以轻松的通过AOP方法“注入”到现有的业务中。

总结：OOP设计项目主框架，设计模式配合主框架完成优化，AOP既可以做到“后悔药”弥补某些业务的补助。也可以事先预防。


二、AOP的实现

1. 基于装饰器设计模式为业务切入新任务。

案例内容：腾讯课堂，学员报名课程的基本业务模拟

 --》验证现有课程是否有时间冲突+付款验证（第三方的）-->课程订单的处理--》上课提醒（短信提醒、QQ弹窗提醒）

2.基于.NET框架的动态代理方式为核心业务切入方法


【1】添加业务接口（和前面一样）

【2】实现业务接口（注意增加一个父类的继承）

【3】增加一个泛型类AOPRealProxy<T>:RealProxy

第一，通过构造方法注入要装饰的对象

第二、重写Invoke方法

第三、编写需要切入的方法，并在重写的Invoke方法中调用。

【4】编写创建业务对象的代理类

【5】在主程序中使用代理类完成业务逻辑调用，并调试过程，观察Invoke方法是如何调用真实业务方法的。

3、使用第三方框架Castle.DiynamicProxy动态代理

【1】通过Nuget添加Castle.Core引用。

【2】添加一个类AOPBasedCastle,实现接口，并添加扩展方法。

【3】编写业务核心实现类，注意方法必须都是virtual，也就是说必须是虚方法。

【4】在主程序中，使用框架完成对象动态创建。

-------------------------------------------------------------------------------------------------------------

【相关概念解释】

1、Ioc（Inversion of control：控制反转），又称为“依赖注入”（Dependence Injection（DI）

控制反转：就是创建对象的权利由我们的开发人员自己，转移到了由容器完成。Ioc的基本理念是不创建对象，但是描述对象创建的方式。也就是说在容器中如何创建对象，我们需要告知容器。

前面我们就讲解的AOP实现过程中，其实我们发现就是Ioc的一种使用。

目前流行的Ioc框架有：Unity、Castle Windsor、Spring.Net、StructureMap、Ninject等

2、重点研究Unity容器

【1】概念理解：是一个轻量级可扩展的依赖注入容器，可以通过代码，也可以通过XML配置文件的形式来配置对象与对象之间的关系，在运行时调用Unity容器即可获得我们所需要的对象。目的就是达到应用程序的松耦合设计。

【2】应用选择：对于小型项目我们可以用代码方式，对于大型项目，我们使用配置文件相对较好。

【3】应用场景：主要用于切入“日志记录、认证、授权、缓存和异常处理”等这些通用业务。

【4】理解Ioc和AOP关系：

AOP面向切面编程，是一种编程思想OOP的延伸。将系统中非核心的业务提取出来，进行单独处理。

主要事情由我做，次要事情由别人做。在AOP的思想具体实现中，会用到Ioc容器。

-------------------------------------------------------------------------------------------------------------


4、使用Unity容器的基本步骤

【1】添加Unity引用（2个）（特别注意版本的选择）

【2】定义业务接口IOrderService，并实现接口。

【3】编写想注入的具体行为类（扩展的各种通用方法）

【4】为每一个行为，设计一个特性类，在特性类中返回具体的特性行为。

【5】为定义的业务接口IOrderService增加需要的特性。

特别注意：这些特性在拦截的时候，针对所有的接口方法生效。

【6】在主程序中使用容器。


-------------------------------------------------------------------------------------------------------------

5. Unity通过配置文件实现Ioc的基本步骤：

【1】添加接口和各种实现类。

【2】添加两个引用：(请使用单独给的dll文件)

【3】编写配置文件App.cofig中的相关节点，如果是web项目，那就在web.config里面

【4】基于配置文件，通过容器创建我们需要的对象达到Ioc

-------------------------------------------------------------------------------------------------------------

6. Spring.Net实现Ioc的基本步骤


【1】添加接口和各种实现类。

【2】添加3个引用：（通过Nuget添加Spring.Core，会自动添加3个引用Spring.Core和Common.Logging、Common.Logging.Core）

【3】编写配置文件App.cofig中的相关节点，如果是web项目，那就在web.config里面

【4】基于配置文件，通过容器创建我们需要的对象达到Ioc











































































































