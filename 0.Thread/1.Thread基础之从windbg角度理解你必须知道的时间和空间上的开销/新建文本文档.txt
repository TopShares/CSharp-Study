一：空间上的开销

1. thread本身来说就是操作系统的概念。。。  

<1> thread的内核数据结构，其中有osid，context => cpu寄存器的里面的一些变量。。。 30ms

<2>. thread 环境块  
   
   tls【thread本地存储】, execptionList 的信息。。。。

   windbg来给大家演示。。。    32,64   =可以达到clr的层面给大家展示底层知识
   
   .loadby sos clr

<3> 用户模式堆栈    内存溢出的一个异常  【堆栈溢出】

    一个线程 分配 1M的堆栈空间，，【参数，局部变量】

<4> 内核模式堆栈    

    在CLR的线程操作，包括线程同步，大多都是调用底层的win32 函数  ，用户模式的参数需要传递到内核模式。。。

2. 时间的开销

<1> 我们进程启动的时候，会加载很多的dll [托管和非托管的], exe，资源，元数据。。。。

    进程启动的时候，我怎么没有看到应用程序域。。。

    进程启动的时候，默认会有三个应用程序域。system domain, shared domain[int,long....] ,domain1.

    -------------------------------------
    开启一个thread，销毁一个thread 都会通知进程中的dll，attach，detach 标志位。。。
    
    通知dll的目的就是 给thread做准备工作，比如销毁，让这些dll做资源清理。。。。

<2> 时间片切换
        
    8个逻辑处理器，可供8个thread并行执行。。。。

    比如说9个thread并发执行。 必然会有一个thread休眠30ms。。。。
    

上面这些就是开启thread带来的开销。。。


大家一定要权衡利弊，开启线程是否划得来。。。

for  => palleral for

