一：锁机制

1. .net锁机制太多了

   时间锁，信号量，互斥锁，读写锁，互锁，易变构造

分类：

<1>  用户模式锁  【就是通过一些cpu指令或者一个死循环】在达到thread等待和休眠

<2>  内核模式锁

                就是调用win32底层的代码，来实现thread的各种操作 Thread.Sleep

<3>  混合锁

             用户模式 + 内核模式 【场景是做多的】  xxxslim


2. 为什么要用锁

   多个线程对一个“共享资源”进行操作的时候，容易出问题。。。 共享资源混乱。。。


3.用户模式锁
  
《1》易变结构： 一个线程读，一个写，在release的某种情况下，会有debug。。。
            
             Thread.MemoryBarrier ,  VolatileRead

  volatile关键字：1.不可以底层对代码进行优化。。。
                  2.我的read和write都是从memrory中读取。。。【我读取的都是最新的】

  class Program
    {
        public static volatile bool isStop = false;

        static void Main(string[] args)
        {
            //isStop = false;

            var t = new Thread(() =>
            {
                var isSuccess = false;

                while (!isStop)
                {
                    isSuccess = !isSuccess;
                }
            });

            t.Start();

            Thread.Sleep(1000);
            isStop = true;
            t.Join();

            Console.WriteLine("主线程执行结束！");
            Console.ReadLine();
        }
    }

《2》互锁结构： Interlocked  【只能做一些简单类型的计算】

    Increment：自增操作
    Decrement：自减操作
    Add：      增加指定的值
    Exchange： 赋值
    CompareExchange： 比较赋值

《3》旋转锁：SpinLock 

    特殊的业务逻辑让thread在用户模式下进行自选，欺骗cpu当前thread正在运行中。。。。
    
    用户模式 -> 内核模式 -> 用户模式 

    数据递增
    

     


  
  
