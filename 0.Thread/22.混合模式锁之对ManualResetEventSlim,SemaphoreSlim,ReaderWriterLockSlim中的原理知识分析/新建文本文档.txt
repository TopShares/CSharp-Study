一：混合锁 = 用户模式锁  +  内核模式锁


1. Thread.Sleep(1)  让线程休眠1ms

   Thread.Sleep(0)  让线程放弃当前的时间片，让本线程更高或者同等线程得到时间片运行。

   Thread.Yield()   让线程立即放弃当前的时间片，可以让更低级别的线程得到运行，当其他
                    thread时间片用完，本thread再度唤醒。。。

  Yield < Sleep(0) < Sleep(1)   

  一个时间片 = 30ms。。
                    

   通常会用到用户模式锁。。。while + 这些Thread。。。


SemaphoreSlim：

ManualResetEventSlim：  有人看守的火车轨道标志，栅栏是合围状态


ReaderWriterLockSlim：

不用说，他们比之前的内核版本，性能要高得多。。。

具体使用，前面的课程已经和大家聊过了，这次只是看一下不同。。。


1. ManualResetEventSlim：优化点


《1》 构造函数中已经可以不提供默认状态，默认是false，表示合围状态。

《2》 使用Wait来代替WaitOne（是WaitHandle祖先类提供了一个方法）

《3》 支持任务取消

《4》 看一下Wait方法中的实现逻辑
     

<1> 原始的WaitOne函数调用方式
// System.Threading.WaitHandle
[SecurityCritical]
[MethodImpl(MethodImplOptions.InternalCall)]
private static extern int WaitOneNative(SafeHandle waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);

<2> 新的Wait方式

		for (int i = 0; i < spinCount; i++)
		{
			if (this.IsSet)
			{
				return true;
			}
			if (i < num2)
			{
				if (i == num2 / 2)
				{
					Thread.Yield();
				}
				else
				{
					Thread.SpinWait(PlatformHelper.ProcessorCount * (4 << i));
				}
			}
			else
			{
				if (i % num4 == 0)
				{
					Thread.Sleep(1);
				}
				else
				{
					if (i % num3 == 0)
					{
						Thread.Sleep(0);
					}
					else
					{
						Thread.Yield();
					}
				}
			}
			if (i >= 100 && i % 10 == 0)
			{
				cancellationToken.ThrowIfCancellationRequested();
			}
		}

其他的方式基本上和原来的内核版本保持一致。。。


二：SemaphoreSlim

  class Program
    {
        //默认1个线程同时运行，最大10个
        static SemaphoreSlim slim = new SemaphoreSlim(1, 10);

        static void Main(string[] args)
        {
            for (int i = 0; i < 10; i++)
            {
                Task.Run(() =>
                {
                    Run();
                });
            }

            //某一个时刻，我像改变默认的并行线程个数，从默认的1 改成10

            System.Threading.Thread.Sleep(2000);
            slim.Release(10);

            Console.Read();
        }

        static void Run()
        {
            slim.Wait();

            Thread.Sleep(1000 * 5);

            Console.WriteLine("当前t1={0} 正在运行 {1}", Thread.CurrentThread.ManagedThreadId, DateTime.Now);

            slim.Release();
        }
    }

三：ReaderWriterLockSlim

1. 用EnterReadLock 带代替AcquireReaderLock 方法，性能比内核版本要搞得多。。


     ReaderWriterLockSlim slim = new ReaderWriterLockSlim();

            slim.EnterReadLock();

            slim.ExitReadLock();

            slim.EnterWriteLock();

            slim.ExitWriteLock();

            ReaderWriterLock rwlock = new ReaderWriterLock();

            //rwlock.AcquireReaderLock()

            Console.Read();


总结一下：

混合锁：先在用户模式下内旋，如果超过一定的阈值，会切换到内核锁。。。

       在内旋的情况下，我们会看到大量的Sleep(0),Sleep(1),Yield等语法。。。





